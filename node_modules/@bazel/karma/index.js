(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@bazel/karma", ["require", "exports", "crypto", "fs", "path", "process", "tmp"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /*
     * Concat all JS files before serving.
     */
    var crypto = require("crypto");
    var fs = require("fs");
    var path = require("path");
    var process = require("process");
    var tmp = require("tmp");
    ///<reference types="lib.dom"/>
    /**
     * Return SHA1 of data buffer.
     */
    function sha1(data) {
        var hash = crypto.createHash('sha1');
        hash.update(data);
        return hash.digest('hex');
    }
    /**
     * Entry-point for the Karma plugin.
     */
    function initConcatJs(logger, emitter, basePath) {
        var log = logger.create('framework.concat_js');
        // Create a tmp file for the concat bundle that is automatically cleaned up on
        // exit.
        var tmpFile = tmp.fileSync({ keep: false, dir: process.env['TEST_TMPDIR'] });
        emitter.on('file_list_modified', function (files) {
            var bundleFile = {
                path: '/concatjs_bundle.js',
                contentPath: tmpFile.name,
                isUrl: false,
                content: ''
            };
            var included = [];
            files.included.forEach(function (file) {
                if (path.extname(file.originalPath) !== '.js') {
                    // Preserve all non-JS that were there in the included list.
                    included.push(file);
                }
                else {
                    var relativePath = path.relative(basePath, file.originalPath).replace(/\\/g, '/');
                    // Remove 'use strict'.
                    var content = file.content.replace(/('use strict'|"use strict");?/, '');
                    content = JSON.stringify(content + '\n//# sourceURL=http://concatjs/base/' +
                        relativePath + '\n');
                    content = "//" + relativePath + "\neval(" + content + ");\n";
                    bundleFile.content += content;
                }
            });
            bundleFile.sha = sha1(Buffer.from(bundleFile.content));
            bundleFile.mtime = new Date();
            included.unshift(bundleFile);
            files.included = included;
            files.served.push(bundleFile);
            log.debug('Writing concatjs bundle to tmp file %s', bundleFile.contentPath);
            fs.writeFileSync(bundleFile.contentPath, bundleFile.content);
        });
    }
    initConcatJs.$inject = ['logger', 'emitter', 'config.basePath'];
    module.exports = {
        'framework:concat_js': ['factory', initConcatJs]
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9pbnRlcm5hbC9rYXJtYS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBOztPQUVHO0lBQ0gsK0JBQWlDO0lBQ2pDLHVCQUF5QjtJQUN6QiwyQkFBNkI7SUFDN0IsaUNBQW1DO0lBQ25DLHlCQUEyQjtJQUMzQiwrQkFBK0I7SUFFL0I7O09BRUc7SUFDSCxTQUFTLElBQUksQ0FBQyxJQUFJO1FBQ2hCLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRO1FBQzdDLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUVqRCw4RUFBOEU7UUFDOUUsUUFBUTtRQUNSLElBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUU3RSxPQUFPLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFVBQUEsS0FBSztZQUNwQyxJQUFNLFVBQVUsR0FBRztnQkFDakIsSUFBSSxFQUFFLHFCQUFxQjtnQkFDM0IsV0FBVyxFQUFFLE9BQU8sQ0FBQyxJQUFJO2dCQUN6QixLQUFLLEVBQUUsS0FBSztnQkFDWixPQUFPLEVBQUUsRUFBRTthQUNMLENBQUM7WUFDVCxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFFcEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO2dCQUN6QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDN0MsNERBQTREO29CQUM1RCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNyQjtxQkFBTTtvQkFDTCxJQUFNLFlBQVksR0FDZCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFFbkUsdUJBQXVCO29CQUN2QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsRUFDL0IsRUFBRSxDQUFDLENBQUM7b0JBQ3ZDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUNwQixPQUFPLEdBQUcsdUNBQXVDO3dCQUNqRCxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBQ3pCLE9BQU8sR0FBRyxPQUFLLFlBQVksZUFBVSxPQUFPLFNBQU0sQ0FBQztvQkFDbkQsVUFBVSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxVQUFVLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM5QixRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTdCLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQzFCLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTlCLEdBQUcsQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEVBQzlDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QixFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVBLFlBQW9CLENBQUMsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXpFLE1BQU0sQ0FBQyxPQUFPLEdBQUc7UUFDZixxQkFBcUIsRUFBRSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUM7S0FDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb25jYXQgYWxsIEpTIGZpbGVzIGJlZm9yZSBzZXJ2aW5nLlxuICovXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgdG1wIGZyb20gJ3RtcCc7XG4vLy88cmVmZXJlbmNlIHR5cGVzPVwibGliLmRvbVwiLz5cblxuLyoqXG4gKiBSZXR1cm4gU0hBMSBvZiBkYXRhIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gc2hhMShkYXRhKSB7XG4gIGNvbnN0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICBoYXNoLnVwZGF0ZShkYXRhKTtcbiAgcmV0dXJuIGhhc2guZGlnZXN0KCdoZXgnKTtcbn1cblxuLyoqXG4gKiBFbnRyeS1wb2ludCBmb3IgdGhlIEthcm1hIHBsdWdpbi5cbiAqL1xuZnVuY3Rpb24gaW5pdENvbmNhdEpzKGxvZ2dlciwgZW1pdHRlciwgYmFzZVBhdGgpIHtcbiAgY29uc3QgbG9nID0gbG9nZ2VyLmNyZWF0ZSgnZnJhbWV3b3JrLmNvbmNhdF9qcycpO1xuXG4gIC8vIENyZWF0ZSBhIHRtcCBmaWxlIGZvciB0aGUgY29uY2F0IGJ1bmRsZSB0aGF0IGlzIGF1dG9tYXRpY2FsbHkgY2xlYW5lZCB1cCBvblxuICAvLyBleGl0LlxuICBjb25zdCB0bXBGaWxlID0gdG1wLmZpbGVTeW5jKHtrZWVwOiBmYWxzZSwgZGlyOiBwcm9jZXNzLmVudlsnVEVTVF9UTVBESVInXX0pO1xuXG4gIGVtaXR0ZXIub24oJ2ZpbGVfbGlzdF9tb2RpZmllZCcsIGZpbGVzID0+IHtcbiAgICBjb25zdCBidW5kbGVGaWxlID0ge1xuICAgICAgcGF0aDogJy9jb25jYXRqc19idW5kbGUuanMnLFxuICAgICAgY29udGVudFBhdGg6IHRtcEZpbGUubmFtZSxcbiAgICAgIGlzVXJsOiBmYWxzZSxcbiAgICAgIGNvbnRlbnQ6ICcnXG4gICAgfSBhcyBhbnk7XG4gICAgY29uc3QgaW5jbHVkZWQgPSBbXTtcblxuICAgIGZpbGVzLmluY2x1ZGVkLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBpZiAocGF0aC5leHRuYW1lKGZpbGUub3JpZ2luYWxQYXRoKSAhPT0gJy5qcycpIHtcbiAgICAgICAgLy8gUHJlc2VydmUgYWxsIG5vbi1KUyB0aGF0IHdlcmUgdGhlcmUgaW4gdGhlIGluY2x1ZGVkIGxpc3QuXG4gICAgICAgIGluY2x1ZGVkLnB1c2goZmlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPVxuICAgICAgICAgICAgcGF0aC5yZWxhdGl2ZShiYXNlUGF0aCwgZmlsZS5vcmlnaW5hbFBhdGgpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcblxuICAgICAgICAvLyBSZW1vdmUgJ3VzZSBzdHJpY3QnLlxuICAgICAgICBsZXQgY29udGVudCA9IGZpbGUuY29udGVudC5yZXBsYWNlKC8oJ3VzZSBzdHJpY3QnfFwidXNlIHN0cmljdFwiKTs/LyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJyk7XG4gICAgICAgIGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGNvbnRlbnQgKyAnXFxuLy8jIHNvdXJjZVVSTD1odHRwOi8vY29uY2F0anMvYmFzZS8nICtcbiAgICAgICAgICAgIHJlbGF0aXZlUGF0aCArICdcXG4nKTtcbiAgICAgICAgY29udGVudCA9IGAvLyR7cmVsYXRpdmVQYXRofVxcbmV2YWwoJHtjb250ZW50fSk7XFxuYDtcbiAgICAgICAgYnVuZGxlRmlsZS5jb250ZW50ICs9IGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBidW5kbGVGaWxlLnNoYSA9IHNoYTEoQnVmZmVyLmZyb20oYnVuZGxlRmlsZS5jb250ZW50KSk7XG4gICAgYnVuZGxlRmlsZS5tdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgaW5jbHVkZWQudW5zaGlmdChidW5kbGVGaWxlKTtcblxuICAgIGZpbGVzLmluY2x1ZGVkID0gaW5jbHVkZWQ7XG4gICAgZmlsZXMuc2VydmVkLnB1c2goYnVuZGxlRmlsZSk7XG5cbiAgICBsb2cuZGVidWcoJ1dyaXRpbmcgY29uY2F0anMgYnVuZGxlIHRvIHRtcCBmaWxlICVzJyxcbiAgICAgICAgYnVuZGxlRmlsZS5jb250ZW50UGF0aCk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhidW5kbGVGaWxlLmNvbnRlbnRQYXRoLCBidW5kbGVGaWxlLmNvbnRlbnQpO1xuICB9KTtcbn1cblxuKGluaXRDb25jYXRKcyBhcyBhbnkpLiRpbmplY3QgPSBbJ2xvZ2dlcicsICdlbWl0dGVyJywgJ2NvbmZpZy5iYXNlUGF0aCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgJ2ZyYW1ld29yazpjb25jYXRfanMnOiBbJ2ZhY3RvcnknLCBpbml0Q29uY2F0SnNdXG59O1xuIl19