{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","testing","compiler","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__values","o","m","Symbol","iterator","value","done","__read","e","ar","push","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","componentResourceResolutionQueue","Set","clearResolutionOfComponentResourcesQueue","clear","unwrapResponse","response","text","_nextReferenceId","MetadataOverrider","_references","Map","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","forEach","prop","startsWith","proto","getPrototypeOf","protoProp","set","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","_loop_1","removeValue","_propHashKey","_loop_2","propValue","filter","has","addMetadata","addValue","propName","JSON","stringify","_serializeReference","ref","id","testBed","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","setOverrides","_a","_b","type","getAnnotation","annotations","a","pop","overrider_1","DirectiveResolver","_super","Directive","ComponentResolver","Component","PipeResolver","Pipe","NgModuleResolver","NgModule","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_nextRootElementId","EMPTY_ARRAY","TestBedRender3","platform","ngModule","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providerOverrides","_compilerProviders","_rootProviderOverrides","_providerOverridesByToken","_templateOverrides","_resolvers","_providers","_compilerOptions","_declarations","_imports","_schemas","_activeFixtures","_compilerInjector","_moduleRef","_testModuleType","_instantiated","_globalCompilationChecked","_initiaNgDefs","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","overrideModule","overrideComponent","component","overrideDirective","directive","overridePipe","pipe","overrideTemplate","template","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","resetTestingModule","_checkGlobalCompilationFinished","ɵresetCompiledComponents","fixture","console","stacktrace","useJit","providers","_c","_d","_assertNotInstantiated","declarations","imports","schemas","resourceLoader","resolvers","_getResolvers","componentOverrides","flatten","resolveForwardRef","declaration","ɵcompileComponent","resolveComponentResources","resourceResolver","urlFetches","urlMap","cachedResourceResolve","url","promise","resp","then","styleUrls","styles","styleOffset","styleUrl","index","style","splice","indexOf","all","compilerInjector","ResourceLoader","_initIfNeeded","execute","tokens","params","map","injectableDef","providerDef","useFactory","provide","deps","useValue","ɵgetInjectableDef","providedIn","overridesForToken","testComponentRenderer","rootElId","componentDef","ngComponentDef","noNgZone","NgZone","componentFactory","ɵRender3ComponentFactory","initComponent","NULL","_createTestModule","_compileNgModule","ɵRender3NgModuleRef","ApplicationInitStatus","runInitializers","_storeNgDef","currentDef","_getProviderOverrides","methodName","methodDescription","rootProviderOverrides","RootScopeModule","jit","enableLongStackTrace","Compiler","R3TestCompiler","DynamicTestModule","COMPILER_OPTIONS","opts","CompilerModule","CompilerModuleFactory","ɵNgModuleFactory","_getMetaWithOverrides","meta","providerOverrides","_getModuleResolver","moduleType","ɵNG_MODULE_DEF","ɵNG_INJECTOR_DEF","ɵcompileNgModuleDefs","compiledComponents","ɵNG_COMPONENT_DEF","metadata_1","ɵNG_DIRECTIVE_DEF","metadata_2","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","calcTransitiveScopesFor","ɵtransitiveScopesFor","transitiveScope","cmp","scope","ɵpatchComponentDefWithScope","_getComponentFactories","ngModuleDef","reduce","factories","ɵflushModuleScopingQueueAsMuchAsPossible","values","mapFn","out","isArray","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","unimplemented","testBed$1","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","TestingCompilerFactory","UNDEFINED","_nextRootElementId$1","TestBedViewEngine","_compiler","_moduleFactory","_testEnvAotSummaries","_aotSummaries","_isRoot","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_createCompilerAndModule","moduleAndComponentFactories","e_1","errorCompType","compFactory","templateOf","ɵoverrideComponentView","e_1_1","return","ngZoneInjector","name","e_2","TestBed","entry","rootScopeImports","ɵAPP_ROOT","compilerFactory","createTestingCompiler","e_2_1","result","overrideProviderImpl","deprecated","def","flags","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","inject","completer","InjectSetupWrapper","_moduleDef","_addModule","_global$1","beforeEach","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c","ɵangular_packages_core_testing_testing_a","withModule","ɵMetadataOverrider","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.0.0-beta.1\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}), global.ng.core, global.ng.compiler));\n}(this, function (exports, core, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponnent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `MyComponent`'s `@Compenent.templateUrl`\n     * // needs to be resolved because `renderComponent` is synchronous process.\n     * // renderComponent(MyComponent);\n     *\n     * // Calling `resolveComponentResources` will resolve `@Compenent.templateUrl` into\n     * // `@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n     * // Use browser's `fetch` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible to returning a `Promise` of the resolved\n     * URL. Browser's `fetch` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var urlFetches = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n                urlFetches.push(promise);\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component) {\n            if (component.templateUrl) {\n                cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                    component.templateUrl = undefined;\n                });\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                });\n            });\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(urlFetches).then(function () { return null; });\n    }\n    var componentResourceResolutionQueue = new Set();\n    function clearResolutionOfComponentResourcesQueue() {\n        componentResourceResolutionQueue.clear();\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (removeValue instanceof Array) {\n                removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (propValue instanceof Array) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && propValue instanceof Array) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                var overrides = _this.overrides.get(type) || [];\n                overrides.push(override);\n                _this.overrides.set(type, overrides);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var _this = this;\n            // We should always return the last match from filter(), or we may return superclass data by\n            // mistake.\n            return reflection.annotations(type).filter(function (a) { return a instanceof _this.type; }).pop() || null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var _this = this;\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var overrides = this.overrides.get(type);\n                    if (overrides) {\n                        var overrider_1 = new MetadataOverrider();\n                        overrides.forEach(function (override) {\n                            resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                        });\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () { return core.Directive; },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () { return core.Component; },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () { return core.Pipe; },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () { return core.NgModule; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    var EMPTY_ARRAY = [];\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            // metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._compilerProviders = [];\n            this._rootProviderOverrides = [];\n            this._providerOverridesByToken = new Map();\n            this._templateOverrides = new Map();\n            this._resolvers = null;\n            // test module configuration\n            this._providers = [];\n            this._compilerOptions = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._compilerInjector = null;\n            this._moduleRef = null;\n            this._testModuleType = null;\n            this._instantiated = false;\n            this._globalCompilationChecked = false;\n            // Map that keeps initial version of component/directive/pipe defs in case\n            // we compile a Type again, thus overriding respective static fields. This is\n            // required to make sure we restore defs to their initial states between test runs\n            this._initiaNgDefs = new Map();\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () { _getTestBedRender3().resetTestEnvironment(); };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () { return _getTestBedRender3().compileComponents(); };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            if (this._instantiated) {\n                throw new Error('Cannot override template when the test module has already been instantiated');\n            }\n            this._templateOverrides.set(component, template);\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.deprecatedOverrideProvider = function (token, provider) {\n            throw new Error('Render3TestBed.deprecatedOverrideProvider is not implemented');\n        };\n        TestBedRender3.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedRender3().get(token, notFoundValue);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            this._checkGlobalCompilationFinished();\n            core.ɵresetCompiledComponents();\n            // reset metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._rootProviderOverrides = [];\n            this._providerOverridesByToken.clear();\n            this._templateOverrides.clear();\n            this._resolvers = null;\n            // reset test module config\n            this._providers = [];\n            this._compilerOptions = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._moduleRef = null;\n            this._testModuleType = null;\n            this._compilerInjector = null;\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n            // restore initial component/directive/pipe defs\n            this._initiaNgDefs.forEach(function (value, type) {\n                Object.defineProperty(type, value[0], value[1]);\n            });\n            this._initiaNgDefs.clear();\n            clearResolutionOfComponentResourcesQueue();\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            var _a, _b;\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers) {\n                (_a = this._providerOverrides).push.apply(_a, __spread(config.providers));\n                (_b = this._compilerProviders).push.apply(_b, __spread(config.providers));\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        TestBedRender3.prototype.compileComponents = function () {\n            var _this = this;\n            var resolvers = this._getResolvers();\n            var declarations = flatten(this._declarations || EMPTY_ARRAY, core.resolveForwardRef);\n            var componentOverrides = [];\n            // Compile the components declared by this module\n            declarations.forEach(function (declaration) {\n                var component = resolvers.component.resolve(declaration);\n                if (component) {\n                    // We make a copy of the metadata to ensure that we don't mutate the original metadata\n                    var metadata = __assign({}, component);\n                    core.ɵcompileComponent(declaration, metadata);\n                    componentOverrides.push([declaration, metadata]);\n                }\n            });\n            var resourceLoader;\n            return resolveComponentResources(function (url) {\n                if (!resourceLoader) {\n                    resourceLoader = _this.compilerInjector.get(compiler.ResourceLoader);\n                }\n                return Promise.resolve(resourceLoader.get(url));\n            })\n                .then(function () {\n                componentOverrides.forEach(function (override) {\n                    // Once resolved, we override the existing metadata, ensuring that the resolved\n                    // resources\n                    // are only available until the next TestBed reset (when `resetTestingModule` is called)\n                    _this.overrideComponent(override[0], { set: override[1] });\n                });\n            });\n        };\n        TestBedRender3.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBedRender3) {\n                return this;\n            }\n            return this._moduleRef.injector.get(token, notFoundValue);\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            var providerDef = provider.useFactory ?\n                { provide: token, useFactory: provider.useFactory, deps: provider.deps || [] } :\n                { provide: token, useValue: provider.useValue };\n            var injectableDef;\n            var isRoot = (typeof token !== 'string' && (injectableDef = core.ɵgetInjectableDef(token)) &&\n                injectableDef.providedIn === 'root');\n            var overridesBucket = isRoot ? this._rootProviderOverrides : this._providerOverrides;\n            overridesBucket.push(providerDef);\n            // keep all overrides grouped by token as well for fast lookups using token\n            var overridesForToken = this._providerOverridesByToken.get(token) || [];\n            overridesForToken.push(providerDef);\n            this._providerOverridesByToken.set(token, overridesForToken);\n        };\n        TestBedRender3.prototype.deprecatedOverrideProvider = function (token, provider) {\n            throw new Error('No implemented in IVY');\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            this._initIfNeeded();\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ngComponentDef;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no 'ngComponentDef' field\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        // internal methods\n        TestBedRender3.prototype._initIfNeeded = function () {\n            this._checkGlobalCompilationFinished();\n            if (this._instantiated) {\n                return;\n            }\n            this._resolvers = this._getResolvers();\n            this._testModuleType = this._createTestModule();\n            this._compileNgModule(this._testModuleType);\n            var parentInjector = this.platform.injector;\n            this._moduleRef = new core.ɵRender3NgModuleRef(this._testModuleType, parentInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal\n            // to core. Cast it to any before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedRender3.prototype._storeNgDef = function (prop, type) {\n            if (!this._initiaNgDefs.has(type)) {\n                var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n                this._initiaNgDefs.set(type, [prop, currentDef]);\n            }\n        };\n        // get overrides for a specific provider (if any)\n        TestBedRender3.prototype._getProviderOverrides = function (provider) {\n            var token = provider && typeof provider === 'object' && provider.hasOwnProperty('provide') ?\n                provider.provide :\n                provider;\n            return this._providerOverridesByToken.get(token) || [];\n        };\n        // creates resolvers taking overrides into account\n        TestBedRender3.prototype._getResolvers = function () {\n            var module = new NgModuleResolver();\n            module.setOverrides(this._moduleOverrides);\n            var component = new ComponentResolver();\n            component.setOverrides(this._componentOverrides);\n            var directive = new DirectiveResolver();\n            directive.setOverrides(this._directiveOverrides);\n            var pipe = new PipeResolver();\n            pipe.setOverrides(this._pipeOverrides);\n            return { module: module, component: component, directive: directive, pipe: pipe };\n        };\n        TestBedRender3.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedRender3.prototype._createTestModule = function () {\n            var _this = this;\n            var rootProviderOverrides = this._rootProviderOverrides;\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule = __decorate([\n                    core.NgModule({\n                        providers: __spread(rootProviderOverrides),\n                        jit: true,\n                    })\n                ], RootScopeModule);\n                return RootScopeModule;\n            }());\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([\n                { provide: core.NgZone, useValue: ngZone },\n                { provide: core.Compiler, useFactory: function () { return new R3TestCompiler(_this); } }\n            ], this._providers, this._providerOverrides);\n            var declarations = this._declarations;\n            var imports = [RootScopeModule, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            return DynamicTestModule;\n        };\n        Object.defineProperty(TestBedRender3.prototype, \"compilerInjector\", {\n            get: function () {\n                if (this._compilerInjector !== undefined) {\n                    this._compilerInjector;\n                }\n                var providers = [];\n                var compilerOptions = this.platform.injector.get(core.COMPILER_OPTIONS);\n                compilerOptions.forEach(function (opts) {\n                    if (opts.providers) {\n                        providers.push(opts.providers);\n                    }\n                });\n                providers.push.apply(providers, __spread(this._compilerProviders));\n                // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n                var CompilerModule = /** @class */ (function () {\n                    function CompilerModule() {\n                    }\n                    CompilerModule = __decorate([\n                        core.NgModule({ providers: providers })\n                    ], CompilerModule);\n                    return CompilerModule;\n                }());\n                var CompilerModuleFactory = new core.ɵNgModuleFactory(CompilerModule);\n                this._compilerInjector = CompilerModuleFactory.create(this.platform.injector).injector;\n                return this._compilerInjector;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TestBedRender3.prototype._getMetaWithOverrides = function (meta, type) {\n            var _this = this;\n            var overrides = {};\n            if (meta.providers && meta.providers.length) {\n                // There are two flattening operations here. The inner flatten() operates on the metadata's\n                // providers and applies a mapping function which retrieves overrides for each incoming\n                // provider. The outer flatten() then flattens the produced overrides array. If this is not\n                // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n                // providers array and contaminate any error messages that might be generated.\n                var providerOverrides = flatten(flatten(meta.providers, function (provider) { return _this._getProviderOverrides(provider); }));\n                if (providerOverrides.length) {\n                    overrides.providers = __spread(meta.providers, providerOverrides);\n                }\n            }\n            var hasTemplateOverride = !!type && this._templateOverrides.has(type);\n            if (hasTemplateOverride) {\n                overrides.template = this._templateOverrides.get(type);\n            }\n            return Object.keys(overrides).length ? __assign({}, meta, overrides) : meta;\n        };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._getModuleResolver = function () { return this._resolvers.module; };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._compileNgModule = function (moduleType) {\n            var _this = this;\n            var ngModule = this._resolvers.module.resolve(moduleType);\n            if (ngModule === null) {\n                throw new Error(core.ɵstringify(moduleType) + \" has no @NgModule annotation\");\n            }\n            this._storeNgDef(core.ɵNG_MODULE_DEF, moduleType);\n            this._storeNgDef(core.ɵNG_INJECTOR_DEF, moduleType);\n            var metadata = this._getMetaWithOverrides(ngModule);\n            core.ɵcompileNgModuleDefs(moduleType, metadata);\n            var declarations = flatten(ngModule.declarations || EMPTY_ARRAY, core.resolveForwardRef);\n            var compiledComponents = [];\n            // Compile the components, directives and pipes declared by this module\n            declarations.forEach(function (declaration) {\n                var component = _this._resolvers.component.resolve(declaration);\n                if (component) {\n                    _this._storeNgDef(core.ɵNG_COMPONENT_DEF, declaration);\n                    var metadata_1 = _this._getMetaWithOverrides(component, declaration);\n                    core.ɵcompileComponent(declaration, metadata_1);\n                    compiledComponents.push(declaration);\n                    return;\n                }\n                var directive = _this._resolvers.directive.resolve(declaration);\n                if (directive) {\n                    _this._storeNgDef(core.ɵNG_DIRECTIVE_DEF, declaration);\n                    var metadata_2 = _this._getMetaWithOverrides(directive);\n                    core.ɵcompileDirective(declaration, metadata_2);\n                    return;\n                }\n                var pipe = _this._resolvers.pipe.resolve(declaration);\n                if (pipe) {\n                    _this._storeNgDef(core.ɵNG_PIPE_DEF, declaration);\n                    core.ɵcompilePipe(declaration, pipe);\n                    return;\n                }\n            });\n            // Compile transitive modules, components, directives and pipes\n            var calcTransitiveScopesFor = function (moduleType) { return core.ɵtransitiveScopesFor(moduleType, function (ngModule) { return _this._compileNgModule(ngModule); }); };\n            var transitiveScope = calcTransitiveScopesFor(moduleType);\n            compiledComponents.forEach(function (cmp) {\n                var scope = _this._templateOverrides.has(cmp) ?\n                    // if we have template override via `TestBed.overrideTemplateUsingTestingModule` -\n                    // define Component scope as TestingModule scope, instead of the scope of NgModule\n                    // where this Component was declared\n                    calcTransitiveScopesFor(_this._testModuleType) :\n                    transitiveScope;\n                core.ɵpatchComponentDefWithScope(cmp.ngComponentDef, scope);\n            });\n        };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._getComponentFactories = function (moduleType) {\n            var _this = this;\n            return moduleType.ngModuleDef.declarations.reduce(function (factories, declaration) {\n                var componentDef = declaration.ngComponentDef;\n                componentDef && factories.push(new core.ɵRender3ComponentFactory(componentDef, _this._moduleRef));\n                return factories;\n            }, []);\n        };\n        /**\n         * Check whether the module scoping queue should be flushed, and flush it if needed.\n         *\n         * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n         * in-progress module compilation. This creates a potential hazard - the very first time the\n         * TestBed is initialized (or if it's reset without being initialized), there may be pending\n         * compilations of modules declared in global scope. These compilations should be finished.\n         *\n         * To ensure that globally declared modules have their components scoped properly, this function\n         * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n         * to any other operations, the scoping queue is flushed.\n         */\n        TestBedRender3.prototype._checkGlobalCompilationFinished = function () {\n            // !this._instantiated should not be necessary, but is left in as an additional guard that\n            // compilations queued in tests (after instantiation) are never flushed accidentally.\n            if (!this._globalCompilationChecked && !this._instantiated) {\n                core.ɵflushModuleScopingQueueAsMuchAsPossible();\n            }\n            this._globalCompilationChecked = true;\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n    function flatten(values, mapFn) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value, mapFn)));\n            }\n            else {\n                out.push(mapFn ? mapFn(value) : value);\n            }\n        });\n        return out;\n    }\n    var R3TestCompiler = /** @class */ (function () {\n        function R3TestCompiler(testBed) {\n            this.testBed = testBed;\n        }\n        R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n            this.testBed._compileNgModule(moduleType);\n            return new core.ɵNgModuleFactory(moduleType);\n        };\n        R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n            return Promise.resolve(this.compileModuleSync(moduleType));\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            var ngModuleFactory = this.compileModuleSync(moduleType);\n            var componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n        };\n        R3TestCompiler.prototype.clearCache = function () { };\n        R3TestCompiler.prototype.clearCacheFor = function (type) { };\n        R3TestCompiler.prototype.getModuleId = function (moduleType) {\n            var meta = this.testBed._getModuleResolver().resolve(moduleType);\n            return meta && meta.id || undefined;\n        };\n        return R3TestCompiler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED = new Object();\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.resetTestEnvironment = function () { _getTestBedViewEngine().resetTestEnvironment(); };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.deprecatedOverrideProvider = function (token, provider) {\n            _getTestBedViewEngine().deprecatedOverrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedViewEngine().get(token, notFoundValue);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var _this = this;\n            var e_2, _a;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var result = this._moduleRef.injector.get(token, UNDEFINED);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.deprecatedOverrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider, /* deprecated */ true);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.get(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}